public {{this.name}} = {
    async sendTransactionAsync(
    {{> typed_params inputs=inputs}}
    {{#this.payable}}
        txData: Partial<TxData> = {},
    {{/this.payable}}
    {{^this.payable}}
        txData: Partial<TxData> = {},
    {{/this.payable}}
    ): Promise<string> {
        const self = this as {{contractName}}Contract;
        const txDataWithDefaults = await self.applyDefaultsToTxDataAsync(
            txData,
            self.{{this.name}}.estimateGasAsync.bind<{{contractName}}Contract, any, Promise<number>>(
                self,
                {{> params inputs=inputs}}
            ),
        );
        return await self.contract.methods.{{this.name}}({{> params inputs=inputs}}).send(
            txDataWithDefaults,
        );
    },
    async estimateGasAsync(
    {{> typed_params inputs=inputs}}
        txData: Partial<TxData> = {},
    ): Promise<number> {
        const txDataWithDefaults = await this.applyDefaultsToTxDataAsync(
            txData,
        );
        return await this.contract.methods.{{this.name}}({{> params inputs=inputs}}).estimateGas(
            txDataWithDefaults,
        );
    },
    getABIEncodedTransactionData(
    {{> typed_params inputs=inputs}}
    ): string {
        return this.contract.methods.{{this.name}}({{> params inputs=inputs}}).encodeABI();
    },
};
